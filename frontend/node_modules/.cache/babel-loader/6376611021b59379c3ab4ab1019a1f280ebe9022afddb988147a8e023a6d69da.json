{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ksoyu\\\\Downloads\\\\nlp\\\\frontend\\\\src\\\\pages\\\\TopicPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopicPage() {\n  _s();\n  const [windows, setWindows] = useState([]);\n  const [selectedWindow, setSelectedWindow] = useState(null);\n  const [globalStats, setGlobalStats] = useState({});\n  const [openClusters, setOpenClusters] = useState({}); // 클러스터 토글 상태\n\n  useEffect(() => {\n    fetch('analysis_data_final.json').then(res => res.json()).then(data => {\n      const filtered = data.filter(w => w.topics && w.topics.length > 0);\n      setWindows(filtered);\n\n      // 전체 키워드 통계 계산\n      const stats = {};\n      filtered.forEach((w, wi) => {\n        const seenInWindow = new Set();\n        w.topics.forEach(topic => {\n          topic.keywords.forEach(kw => {\n            const key = kw.toLowerCase();\n            if (!stats[key]) stats[key] = {\n              freq: 0,\n              windows: new Set()\n            };\n            stats[key].freq += 1;\n            stats[key].windows.add(wi);\n          });\n        });\n      });\n      setGlobalStats(stats);\n    }).catch(err => console.error('Failed to load analysis data:', err));\n  }, []);\n  const width = 900;\n  const height = 120;\n  const stopwords = new Set(['model', 'language', 'data', 'system', 'task', 'approach', 'method', 'performance', 'based', 'learning', 'use', 'using', 'information', 'research', 'result', 'results', 'different', 'used', 'set']);\n  const isValidKeyword = w => {\n    if (stopwords.has(w)) return false;\n    if (!isNaN(w) && /^[0-9]+$/.test(w)) return false;\n    return true;\n  };\n  const getGlobalKeywordScores = topics => {\n    const freq = {};\n    topics.forEach(topic => {\n      topic.keywords.forEach(kw => {\n        const w = kw.toLowerCase();\n        if (!isValidKeyword(w)) return;\n        freq[w] = (freq[w] || 0) + 1;\n      });\n    });\n    const totalWindows = windows.length;\n    const scored = Object.entries(freq).map(([word, count]) => {\n      var _globalStats$word, _globalStats$word$win;\n      const windowAppearances = ((_globalStats$word = globalStats[word]) === null || _globalStats$word === void 0 ? void 0 : (_globalStats$word$win = _globalStats$word.windows) === null || _globalStats$word$win === void 0 ? void 0 : _globalStats$word$win.size) || 1;\n      const idf = Math.log(totalWindows / windowAppearances);\n      return {\n        word,\n        score: count * idf\n      };\n    });\n    return scored.sort((a, b) => b.score - a.score).slice(0, 20);\n  };\n  const getTopicKeywordScores = topic => {\n    const freq = {};\n    topic.keywords.forEach(kw => {\n      const w = kw.toLowerCase();\n      if (!isValidKeyword(w)) return;\n      freq[w] = (freq[w] || 0) + 1;\n    });\n    const totalWindows = windows.length;\n    const scored = Object.entries(freq).map(([word, count]) => {\n      var _globalStats$word2, _globalStats$word2$wi;\n      const windowAppearances = ((_globalStats$word2 = globalStats[word]) === null || _globalStats$word2 === void 0 ? void 0 : (_globalStats$word2$wi = _globalStats$word2.windows) === null || _globalStats$word2$wi === void 0 ? void 0 : _globalStats$word2$wi.size) || 1;\n      const idf = Math.log(totalWindows / windowAppearances);\n      return {\n        word,\n        score: count * idf\n      };\n    });\n    return scored.sort((a, b) => b.score - a.score);\n  };\n  const getEmergingKeywords = currentIndex => {\n    if (currentIndex <= 0) return [];\n    const prevKeywords = new Set();\n    windows[currentIndex - 1].topics.forEach(topic => {\n      topic.keywords.forEach(kw => {\n        const w = kw.toLowerCase();\n        if (isValidKeyword(w)) prevKeywords.add(w);\n      });\n    });\n    const currentKeywords = {};\n    windows[currentIndex].topics.forEach(topic => {\n      topic.keywords.forEach(kw => {\n        const w = kw.toLowerCase();\n        if (isValidKeyword(w) && !prevKeywords.has(w)) {\n          currentKeywords[w] = (currentKeywords[w] || 0) + 1;\n        }\n      });\n    });\n    const totalWindows = windows.length;\n    const scored = Object.entries(currentKeywords).map(([word, count]) => {\n      var _globalStats$word3, _globalStats$word3$wi;\n      const windowAppearances = ((_globalStats$word3 = globalStats[word]) === null || _globalStats$word3 === void 0 ? void 0 : (_globalStats$word3$wi = _globalStats$word3.windows) === null || _globalStats$word3$wi === void 0 ? void 0 : _globalStats$word3$wi.size) || 1;\n      const idf = Math.log(totalWindows / windowAppearances);\n      return {\n        word,\n        score: count * idf\n      };\n    });\n    return scored.sort((a, b) => b.score - a.score).slice(0, 10).map(k => k.word);\n  };\n  const toggleCluster = id => {\n    setOpenClusters(prev => ({\n      ...prev,\n      [id]: !prev[id]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '30px',\n      maxWidth: '1000px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC8 Topics Timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      style: {\n        marginBottom: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 50,\n        y1: height / 2,\n        x2: width - 50,\n        y2: height / 2,\n        stroke: \"#ccc\",\n        strokeWidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), windows.map((win, i) => {\n        const x = d3.scaleLinear().domain([windows[0].window_start, windows[windows.length - 1].window_start]).range([60, width - 60])(win.window_start);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `translate(${x}, ${height / 2})`,\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            r: selectedWindow === win ? 8 : 6,\n            fill: selectedWindow === win ? '#007bff' : '#555',\n            onClick: () => setSelectedWindow(win),\n            style: {\n              cursor: 'pointer'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            y: 20,\n            textAnchor: \"middle\",\n            style: {\n              fontSize: '12px',\n              fill: '#333'\n            },\n            children: [win.window_start, \"-\", win.window_end]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), selectedWindow && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#fff',\n        padding: '20px',\n        borderRadius: '10px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [selectedWindow.window_start, \" - \", selectedWindow.window_end]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDD25 Top Keywords (All Clusters)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '10px',\n          marginBottom: '15px'\n        },\n        children: getTopKeywords(selectedWindow).map((kw, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            background: '#ffe0b2',\n            padding: '6px 10px',\n            borderRadius: '6px',\n            fontSize: '13px'\n          },\n          children: kw\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: getGlobalKeywordScores(selectedWindow.topics).map(({\n          word,\n          score\n        }, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '6px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '13px'\n              },\n              children: word\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '12px',\n                color: '#666'\n              },\n              children: score.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              background: '#eee',\n              height: '6px',\n              borderRadius: '3px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: `${Math.min(score * 10, 100)}%`,\n                background: '#007bff',\n                height: '100%'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDCC2 Clusters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyle: 'none',\n          paddingLeft: 0\n        },\n        children: selectedWindow.topics.map((topic, i) => {\n          const clusterId = topic.cluster_id;\n          const isOpen = openClusters[clusterId] || false;\n          const scoredKeywords = getTopicKeywordScores(topic);\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              marginBottom: '12px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => toggleCluster(clusterId),\n              style: {\n                cursor: 'pointer',\n                fontWeight: 'bold',\n                marginBottom: '6px'\n              },\n              children: [\"\\u25B6 Cluster \", clusterId, \" (size: \", topic.size, \") \", isOpen ? '▲' : '▼']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 19\n            }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginLeft: '10px'\n              },\n              children: scoredKeywords.map(({\n                word,\n                score\n              }, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: '6px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: 'flex',\n                    justifyContent: 'space-between'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      fontSize: '13px'\n                    },\n                    children: word\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      fontSize: '12px',\n                      color: '#666'\n                    },\n                    children: score.toFixed(2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    background: '#eee',\n                    height: '6px',\n                    borderRadius: '3px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      width: `${Math.min(score * 10, 100)}%`,\n                      background: '#007bff',\n                      height: '100%'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 27\n                }, this)]\n              }, j, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: \"\\uD83C\\uDF31 Emerging Keywords\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '10px'\n        },\n        children: getEmergingKeywords(windows.indexOf(selectedWindow)).map((kw, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            background: '#e0f7fa',\n            padding: '6px 10px',\n            borderRadius: '6px',\n            fontSize: '13px'\n          },\n          children: kw\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(TopicPage, \"xBafVoJfD7hnrgKv4q+92MTJL9w=\");\n_c = TopicPage;\nexport default TopicPage;\nvar _c;\n$RefreshReg$(_c, \"TopicPage\");","map":{"version":3,"names":["React","useEffect","useState","d3","jsxDEV","_jsxDEV","TopicPage","_s","windows","setWindows","selectedWindow","setSelectedWindow","globalStats","setGlobalStats","openClusters","setOpenClusters","fetch","then","res","json","data","filtered","filter","w","topics","length","stats","forEach","wi","seenInWindow","Set","topic","keywords","kw","key","toLowerCase","freq","add","catch","err","console","error","width","height","stopwords","isValidKeyword","has","isNaN","test","getGlobalKeywordScores","totalWindows","scored","Object","entries","map","word","count","_globalStats$word","_globalStats$word$win","windowAppearances","size","idf","Math","log","score","sort","a","b","slice","getTopicKeywordScores","_globalStats$word2","_globalStats$word2$wi","getEmergingKeywords","currentIndex","prevKeywords","currentKeywords","_globalStats$word3","_globalStats$word3$wi","k","toggleCluster","id","prev","style","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","x1","y1","x2","y2","stroke","strokeWidth","win","i","x","scaleLinear","domain","window_start","range","transform","r","fill","onClick","cursor","y","textAnchor","fontSize","window_end","background","borderRadius","boxShadow","display","flexWrap","gap","getTopKeywords","justifyContent","color","toFixed","min","listStyle","paddingLeft","clusterId","cluster_id","isOpen","scoredKeywords","fontWeight","marginLeft","j","marginTop","indexOf","_c","$RefreshReg$"],"sources":["C:/Users/ksoyu/Downloads/nlp/frontend/src/pages/TopicPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nfunction TopicPage() {\r\n  const [windows, setWindows] = useState([]);\r\n  const [selectedWindow, setSelectedWindow] = useState(null);\r\n  const [globalStats, setGlobalStats] = useState({});\r\n  const [openClusters, setOpenClusters] = useState({}); // 클러스터 토글 상태\r\n\r\n  useEffect(() => {\r\n    fetch('analysis_data_final.json')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const filtered = data.filter(w => w.topics && w.topics.length > 0);\r\n        setWindows(filtered);\r\n\r\n        // 전체 키워드 통계 계산\r\n        const stats = {};\r\n        filtered.forEach((w, wi) => {\r\n          const seenInWindow = new Set();\r\n          w.topics.forEach(topic => {\r\n            topic.keywords.forEach(kw => {\r\n              const key = kw.toLowerCase();\r\n              if (!stats[key]) stats[key] = { freq: 0, windows: new Set() };\r\n              stats[key].freq += 1;\r\n              stats[key].windows.add(wi);\r\n            });\r\n          });\r\n        });\r\n\r\n        setGlobalStats(stats);\r\n      })\r\n      .catch(err => console.error('Failed to load analysis data:', err));\r\n  }, []);\r\n\r\n  const width = 900;\r\n  const height = 120;\r\n\r\n  const stopwords = new Set([\r\n    'model', 'language', 'data', 'system', 'task', 'approach', 'method',\r\n    'performance', 'based', 'learning', 'use', 'using', 'information',\r\n    'research', 'result', 'results', 'different', 'used', 'set'\r\n  ]);\r\n\r\n  const isValidKeyword = (w) => {\r\n    if (stopwords.has(w)) return false;\r\n    if (!isNaN(w) && /^[0-9]+$/.test(w)) return false;\r\n    return true;\r\n  };\r\n\r\n  const getGlobalKeywordScores = (topics) => {\r\n    const freq = {};\r\n\r\n    topics.forEach(topic => {\r\n      topic.keywords.forEach(kw => {\r\n        const w = kw.toLowerCase();\r\n        if (!isValidKeyword(w)) return;\r\n        freq[w] = (freq[w] || 0) + 1;\r\n      });\r\n    });\r\n\r\n    const totalWindows = windows.length;\r\n    const scored = Object.entries(freq).map(([word, count]) => {\r\n      const windowAppearances = globalStats[word]?.windows?.size || 1;\r\n      const idf = Math.log(totalWindows / windowAppearances);\r\n      return { word, score: count * idf };\r\n    });\r\n\r\n    return scored.sort((a, b) => b.score - a.score).slice(0, 20);\r\n  };\r\n\r\n  const getTopicKeywordScores = (topic) => {\r\n    const freq = {};\r\n    topic.keywords.forEach(kw => {\r\n      const w = kw.toLowerCase();\r\n      if (!isValidKeyword(w)) return;\r\n      freq[w] = (freq[w] || 0) + 1;\r\n    });\r\n\r\n    const totalWindows = windows.length;\r\n    const scored = Object.entries(freq).map(([word, count]) => {\r\n      const windowAppearances = globalStats[word]?.windows?.size || 1;\r\n      const idf = Math.log(totalWindows / windowAppearances);\r\n      return { word, score: count * idf };\r\n    });\r\n\r\n    return scored.sort((a, b) => b.score - a.score);\r\n  };\r\n\r\n  const getEmergingKeywords = (currentIndex) => {\r\n    if (currentIndex <= 0) return [];\r\n\r\n    const prevKeywords = new Set();\r\n    windows[currentIndex - 1].topics.forEach(topic => {\r\n      topic.keywords.forEach(kw => {\r\n        const w = kw.toLowerCase();\r\n        if (isValidKeyword(w)) prevKeywords.add(w);\r\n      });\r\n    });\r\n\r\n    const currentKeywords = {};\r\n    windows[currentIndex].topics.forEach(topic => {\r\n      topic.keywords.forEach(kw => {\r\n        const w = kw.toLowerCase();\r\n        if (isValidKeyword(w) && !prevKeywords.has(w)) {\r\n          currentKeywords[w] = (currentKeywords[w] || 0) + 1;\r\n        }\r\n      });\r\n    });\r\n\r\n    const totalWindows = windows.length;\r\n    const scored = Object.entries(currentKeywords).map(([word, count]) => {\r\n      const windowAppearances = globalStats[word]?.windows?.size || 1;\r\n      const idf = Math.log(totalWindows / windowAppearances);\r\n      return { word, score: count * idf };\r\n    });\r\n\r\n    return scored\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 10)\r\n      .map(k => k.word);\r\n  };\r\n\r\n  const toggleCluster = (id) => {\r\n    setOpenClusters(prev => ({ ...prev, [id]: !prev[id] }));\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '30px', maxWidth: '1000px', margin: '0 auto' }}>\r\n      <h2>📈 Topics Timeline</h2>\r\n\r\n      <svg width={width} height={height} style={{ marginBottom: '30px' }}>\r\n        <line x1={50} y1={height / 2} x2={width - 50} y2={height / 2} stroke=\"#ccc\" strokeWidth={2} />\r\n        {windows.map((win, i) => {\r\n          const x = d3.scaleLinear()\r\n            .domain([windows[0].window_start, windows[windows.length - 1].window_start])\r\n            .range([60, width - 60])(win.window_start);\r\n          return (\r\n            <g key={i} transform={`translate(${x}, ${height / 2})`}>\r\n              <circle\r\n                r={selectedWindow === win ? 8 : 6}\r\n                fill={selectedWindow === win ? '#007bff' : '#555'}\r\n                onClick={() => setSelectedWindow(win)}\r\n                style={{ cursor: 'pointer' }}\r\n              />\r\n              <text\r\n                y={20}\r\n                textAnchor=\"middle\"\r\n                style={{ fontSize: '12px', fill: '#333' }}\r\n              >\r\n                {win.window_start}-{win.window_end}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </svg>\r\n\r\n      {selectedWindow && (\r\n        <div style={{ background: '#fff', padding: '20px', borderRadius: '10px', boxShadow: '0 2px 8px rgba(0,0,0,0.1)' }}>\r\n          <h3>{selectedWindow.window_start} - {selectedWindow.window_end}</h3>\r\n          <h4>🔥 Top Keywords (All Clusters)</h4>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px', marginBottom: '15px' }}>\r\n            {getTopKeywords(selectedWindow).map((kw, i) => (\r\n              <span key={i} style={{ background: '#ffe0b2', padding: '6px 10px', borderRadius: '6px', fontSize: '13px' }}>{kw}</span>\r\n            ))}\r\n          </div>\r\n          <div style={{ marginBottom: '20px' }}>\r\n            {getGlobalKeywordScores(selectedWindow.topics).map(({ word, score }, i) => (\r\n              <div key={i} style={{ marginBottom: '6px' }}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                  <span style={{ fontSize: '13px' }}>{word}</span>\r\n                  <span style={{ fontSize: '12px', color: '#666' }}>{score.toFixed(2)}</span>\r\n                </div>\r\n                <div style={{ background: '#eee', height: '6px', borderRadius: '3px' }}>\r\n                  <div style={{\r\n                    width: `${Math.min(score * 10, 100)}%`,\r\n                    background: '#007bff',\r\n                    height: '100%'\r\n                  }}></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <h4>📂 Clusters</h4>\r\n          <ul style={{ listStyle: 'none', paddingLeft: 0 }}>\r\n            {selectedWindow.topics.map((topic, i) => {\r\n              const clusterId = topic.cluster_id;\r\n              const isOpen = openClusters[clusterId] || false;\r\n              const scoredKeywords = getTopicKeywordScores(topic);\r\n              return (\r\n                <li key={i} style={{ marginBottom: '12px' }}>\r\n                  <div\r\n                    onClick={() => toggleCluster(clusterId)}\r\n                    style={{ cursor: 'pointer', fontWeight: 'bold', marginBottom: '6px' }}\r\n                  >\r\n                    ▶ Cluster {clusterId} (size: {topic.size}) {isOpen ? '▲' : '▼'}\r\n                  </div>\r\n                  {isOpen && (\r\n                    <div style={{ marginLeft: '10px' }}>\r\n                      {scoredKeywords.map(({ word, score }, j) => (\r\n                        <div key={j} style={{ marginBottom: '6px' }}>\r\n                          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                            <span style={{ fontSize: '13px' }}>{word}</span>\r\n                            <span style={{ fontSize: '12px', color: '#666' }}>{score.toFixed(2)}</span>\r\n                          </div>\r\n                          <div style={{ background: '#eee', height: '6px', borderRadius: '3px' }}>\r\n                            <div style={{\r\n                              width: `${Math.min(score * 10, 100)}%`,\r\n                              background: '#007bff',\r\n                              height: '100%'\r\n                            }}></div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n\r\n          <h4 style={{ marginTop: '20px' }}>🌱 Emerging Keywords</h4>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n            {getEmergingKeywords(windows.indexOf(selectedWindow)).map((kw, i) => (\r\n              <span key={i} style={{ background: '#e0f7fa', padding: '6px 10px', borderRadius: '6px', fontSize: '13px' }}>{kw}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopicPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}