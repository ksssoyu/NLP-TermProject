{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ksoyu\\\\Downloads\\\\nlp\\\\frontend\\\\src\\\\pages\\\\CitationYearPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CitationYearPage() {\n  _s();\n  var _currentData$cluster_, _currentData$cluster_2, _currentData$cluster_3;\n  const svgRef = useRef();\n  const [yearlyEmergingKeywords, setYearlyEmergingKeywords] = useState({});\n  const [allYearData, setAllYearData] = useState({});\n  const [selectedYear, setSelectedYear] = useState('2015-2017');\n  const [currentData, setCurrentData] = useState(null);\n  const [selectedCluster, setSelectedCluster] = useState(null);\n  const [selectedPaper, setSelectedPaper] = useState(null);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [citationLookup, setCitationLookup] = useState({}); // id → {authors, year}\n  const [errorMessage, setErrorMessage] = useState('');\n  const [emergingKeywords, setEmergingKeywords] = useState([]);\n  const simulationRef = useRef(null);\n  const availableYears = [{\n    label: '2015-2017',\n    file: 'cluster_2015_2017.json'\n  }, {\n    label: '2016-2018',\n    file: 'cluster_2016_2018.json'\n  }, {\n    label: '2017-2019',\n    file: 'cluster_2017_2019.json'\n  }, {\n    label: '2018-2020',\n    file: 'cluster_2018_2020.json'\n  }, {\n    label: '2019-2021',\n    file: 'cluster_2019_2021.json'\n  }, {\n    label: '2020-2022',\n    file: 'cluster_2020_2022.json'\n  }, {\n    label: '2021-2023',\n    file: 'cluster_2021_2023.json'\n  }, {\n    label: '2022-2024',\n    file: 'cluster_2022_2024.json'\n  }];\n  const [pagerankLookup, setPagerankLookup] = useState({}); // 논문 ID → PageRank\n\n  useEffect(() => {\n    fetch('/papers_by_pagerank.json').then(res => res.json()).then(json => {\n      const map = {};\n      json.forEach(p => {\n        map[p.id] = p.pagerank;\n      });\n      setPagerankLookup(map);\n    }).catch(err => console.error('Failed to load PageRank data:', err));\n  }, []);\n  useEffect(() => {\n    // citation_graph_with_cluster_v3.json 파일 로드\n    fetch('/citation_graph_with_cluster_v3.json').then(res => res.json()).then(json => {\n      // nodes 배열 → id 기반 메타데이터 맵으로 변환\n      const map = {};\n      json.nodes.forEach(n => {\n        var _n$citationCount;\n        let authors = [];\n        if (Array.isArray(n.authors)) authors = n.authors;else if (typeof n.authors === 'string') {\n          try {\n            authors = JSON.parse(n.authors);\n          } // '[\"A\",\"B\"]'\n          catch {\n            authors = n.authors.split(/,\\s*/);\n          } // 'A, B, C'\n        }\n        map[n.id] = {\n          authors,\n          year: n.year,\n          citationCount: (_n$citationCount = n.citationCount) !== null && _n$citationCount !== void 0 ? _n$citationCount : 0\n        };\n      });\n      setCitationLookup(map);\n    }).catch(err => console.error('Failed to load citation data:', err));\n\n    // 모든 연도별 JSON 파일을 로드\n    Promise.all(availableYears.map(year => fetch(`/cluster_with_keywords_by_year/${year.file}`).then(res => res.json()).catch(err => {\n      console.error(`Failed to load ${year.file}:`, err);\n      return null;\n    }))).then(dataArray => {\n      const yearDataMap = {};\n      availableYears.forEach((year, idx) => {\n        if (dataArray[idx]) {\n          yearDataMap[year.label] = dataArray[idx];\n        }\n      });\n      setAllYearData(yearDataMap);\n      // --- Emerging Topic Analysis ---\n      const keywordTimeline = {};\n      availableYears.forEach(({\n        label\n      }) => {\n        const yearData = yearDataMap[label];\n        if (!yearData) return;\n        Object.values(yearData.cluster_keywords).forEach(keywords => {\n          keywords.forEach(keyword => {\n            if (!keywordTimeline[keyword]) keywordTimeline[keyword] = {};\n            keywordTimeline[keyword][label] = (keywordTimeline[keyword][label] || 0) + 1;\n          });\n        });\n      });\n      // Build year-specific emerging keyword list\n      const yearToKeywordMap = {};\n      availableYears.forEach(({\n        label\n      }, idx) => {\n        var _availableYears;\n        const currentData = yearDataMap[label];\n        if (!currentData) return;\n        const prev = (_availableYears = availableYears[idx - 1]) === null || _availableYears === void 0 ? void 0 : _availableYears.label;\n        const prevData = yearDataMap[prev];\n        const currentKeywordCounts = {};\n        Object.values(currentData.cluster_keywords).forEach(kwList => {\n          kwList.forEach(k => currentKeywordCounts[k] = (currentKeywordCounts[k] || 0) + 1);\n        });\n        const prevKeywordCounts = {};\n        if (prevData) {\n          Object.values(prevData.cluster_keywords).forEach(kwList => {\n            kwList.forEach(k => prevKeywordCounts[k] = (prevKeywordCounts[k] || 0) + 1);\n          });\n        }\n        const trendList = Object.entries(currentKeywordCounts).map(([k, curCount]) => {\n          const prevCount = prevKeywordCounts[k] || 0;\n          return {\n            keyword: k,\n            prevCount,\n            curCount\n          };\n        }).filter(({\n          prevCount,\n          curCount\n        }) => curCount >= 2 && curCount > prevCount * 1.5).sort((a, b) => b.curCount - a.curCount).slice(0, 8).map(t => t.keyword);\n        yearToKeywordMap[label] = trendList;\n      });\n      setYearlyEmergingKeywords(yearToKeywordMap);\n      const latestYears = availableYears.slice(-3).map(y => y.label);\n      const earlierYears = availableYears.slice(0, -3).map(y => y.label);\n      const trends = Object.entries(keywordTimeline).map(([keyword, counts]) => {\n        const past = earlierYears.reduce((sum, year) => sum + (counts[year] || 0), 0);\n        const recent = latestYears.reduce((sum, year) => sum + (counts[year] || 0), 0);\n        return {\n          keyword,\n          past,\n          recent\n        };\n      });\n      const trending = trends.filter(({\n        past,\n        recent\n      }) => recent >= 3 && recent > past * 1.5).sort((a, b) => b.recent - a.recent).slice(0, 10).map(t => t.keyword);\n      setEmergingKeywords(trending);\n\n      // 첫 번째 사용 가능한 데이터로 초기화\n      const firstAvailableYear = availableYears.find(year => yearDataMap[year.label]);\n      if (firstAvailableYear) {\n        setSelectedYear(firstAvailableYear.label);\n        setCurrentData(yearDataMap[firstAvailableYear.label]);\n      }\n    }).catch(err => {\n      console.error('Failed to load year data:', err);\n    });\n  }, []);\n  const handleYearChange = year => {\n    setSelectedYear(year);\n    setCurrentData(allYearData[year]);\n    setSelectedCluster(null);\n    setSelectedPaper(null);\n    setSearchKeyword('');\n    setSuggestions([]);\n    setErrorMessage('');\n  };\n  const handleInputChange = e => {\n    const keyword = e.target.value;\n    setSearchKeyword(keyword);\n    if (keyword.length < 2 || !currentData) {\n      setSuggestions([]);\n      return;\n    }\n    const matched = [];\n    Object.values(currentData.cluster_details).forEach(papers => {\n      papers.forEach(paper => {\n        if (paper.title.toLowerCase().includes(keyword.toLowerCase()) && matched.length < 10) {\n          matched.push(paper);\n        }\n      });\n    });\n    setSuggestions(matched);\n  };\n  const handleSuggestionClick = paper => {\n    const enrichedPaper = {\n      ...paper,\n      name: paper.title // ← 이 한 줄만 추가하면 해결\n    };\n    setSelectedPaper(enrichedPaper);\n    setSearchKeyword(paper.title);\n    setSuggestions([]);\n\n    // 클러스터 찾기\n    Object.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\n      if (papers.some(p => p.id === paper.id)) {\n        setSelectedCluster(clusterId);\n      }\n    });\n  };\n  const handleSearch = () => {\n    if (!currentData) return;\n\n    // 논문 제목이 검색된 연도에 존재하는지 확인\n    let foundPaper = null;\n    let isPaperFoundInCurrentYear = false;\n    Object.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\n      const match = papers.find(p => p.title.toLowerCase() === searchKeyword.toLowerCase());\n      if (match) {\n        foundPaper = match;\n        isPaperFoundInCurrentYear = true;\n      }\n    });\n    if (isPaperFoundInCurrentYear) {\n      handleSuggestionClick(foundPaper);\n    } else {\n      setErrorMessage('해당 연도에 존재하지 않는 논문입니다.');\n      setSelectedPaper(null);\n      setSelectedCluster(null);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const safeSelector = id => {\n    // CSS 선택자 규칙에 맞게 변환 (예: . 대신 _로 변환)\n    // 1. Replace all characters that are not alphanumeric, hyphens, or underscores with an underscore.\n    let cleanedId = id.replace(/[^a-zA-Z0-9_-]/g, \"_\");\n\n    // 2. Ensure the ID starts with a letter or an underscore.\n    //    If it starts with a number or hyphen (which is allowed later but not at the start),\n    //    prepend an underscore.\n    if (!/^[a-zA-Z_]/.test(cleanedId)) {\n      cleanedId = \"_\" + cleanedId;\n    }\n    return cleanedId;\n  };\n  const zoomInToNode = nodeId => {\n    const svg = d3.select(svgRef.current);\n    const width = 1000,\n      height = 700;\n    const node = d3.select(`g#${safeSelector(nodeId)}`);\n    const d = node.datum();\n    if (!d || d.x == null || d.y == null) return;\n\n    // ① 시뮬레이션이 돌고 있으면 멈춤\n    if (simulationRef.current) simulationRef.current.stop();\n    const scale = 1.5;\n    const transform = d3.zoomIdentity.translate(width / 2 - d.x * scale, height / 2 - d.y * scale).scale(scale);\n    const zoom = d3.zoom().on('zoom', event => {\n      svg.select('g').attr('transform', event.transform);\n    });\n    svg.call(zoom);\n\n    // ② 한 번만 부드럽게 이동\n    svg.transition().duration(750).call(zoom.transform, transform);\n  };\n  useEffect(() => {\n    if (!currentData) return;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n    const width = 1000;\n    const height = 700;\n    svg.attr('viewBox', [0, 0, width, height]);\n    const svgGroup = svg.append(\"g\");\n\n    // 클러스터 데이터를 노드와 링크로 변환\n    const nodes = [];\n    const links = [];\n    Object.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\n      // 클러스터 중심 노드\n      const centerNode = {\n        id: `cluster_${clusterId}`,\n        name: `Cluster ${clusterId}`,\n        type: 'cluster',\n        clusterId: clusterId,\n        keywords: currentData.cluster_keywords[clusterId] || [],\n        paperCount: papers.length\n      };\n      nodes.push(centerNode);\n\n      // 논문 노드들\n      papers.forEach(paper => {\n        nodes.push({\n          id: paper.id,\n          name: paper.title,\n          type: 'paper',\n          clusterId: clusterId,\n          // authors가 문자열이면 JSON.parse 해서 배열로 넣기\n          detail: {\n            ...paper,\n            authors: (() => {\n              if (Array.isArray(paper.authors)) return paper.authors;\n              if (typeof paper.authors === 'string') {\n                try {\n                  return JSON.parse(paper.authors);\n                } // '[\"A\",\"B\"]' 형태\n                catch {\n                  return paper.authors.split(/,\\s*/);\n                } // 'A, B, C' 형태\n              }\n              return []; // 정보 없을 때\n            })()\n          }\n        });\n\n        // 클러스터 중심과 논문을 연결\n        links.push({\n          source: `cluster_${clusterId}`,\n          target: paper.id\n        });\n      });\n    });\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    /* ✅ 여기서부터 새로 추가 */\n    const drawGraph = data => {\n      if (!data) return;\n\n      // === (원래 useEffect 안에 있던 그래프 생성 코드) ===\n      const svg = d3.select(svgRef.current);\n      svg.selectAll('*').remove();\n      const width = 1000,\n        height = 700;\n      svg.attr('viewBox', [0, 0, width, height]);\n      const svgGroup = svg.append('g');\n\n      /* 1. nodes, links 구성 */\n      const nodes = [];\n      const links = [];\n      Object.entries(data.cluster_details).forEach(([clusterId, papers]) => {\n        nodes.push({\n          id: `cluster_${clusterId}`,\n          name: `Cluster ${clusterId}`,\n          type: 'cluster',\n          clusterId,\n          keywords: data.cluster_keywords[clusterId] || [],\n          paperCount: papers.length\n        });\n        papers.forEach(paper => {\n          nodes.push({\n            id: paper.id,\n            name: paper.title,\n            type: 'paper',\n            clusterId,\n            detail: paper\n          });\n          links.push({\n            source: `cluster_${clusterId}`,\n            target: paper.id\n          });\n        });\n      });\n\n      /* 2. forceSimulation */\n      const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id).distance(80)).force('charge', d3.forceManyBody().strength(d => d.type === 'cluster' ? -500 : -100)).force('center', d3.forceCenter(width / 2, height / 2)).force('collision', d3.forceCollide(d => d.type === 'cluster' ? 40 : 20)).alphaDecay(0.05);\n      simulationRef.current = simulation;\n\n      /* 3. link, nodeGroup, drag, tick 콜백 (기존 코드 그대로) */\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\n      const link = svgGroup.append('g').attr('stroke', '#aaa').attr('stroke-opacity', 0.3).selectAll('line').data(links).join('line').attr('stroke-width', 1);\n      const nodeGroup = svgGroup.append('g').selectAll('g').data(nodes).join('g').attr('id', d => safeSelector(d.id)).call(drag(simulation)).on('click', (event, d) => {\n        if (d.type === 'cluster') {\n          setSelectedCluster(d.clusterId);\n          setSelectedPaper(null);\n        } else {\n          setSelectedCluster(d.clusterId);\n          setSelectedPaper(d); // 줌은 선택-effect가 수행\n        }\n      });\n      nodeGroup.append('circle').attr('r', d => {\n        var _topPapersByCluster$d;\n        if (d.type === 'cluster') return 25;\n        if ((_topPapersByCluster$d = topPapersByCluster[d.clusterId]) !== null && _topPapersByCluster$d !== void 0 && _topPapersByCluster$d.has(d.id)) return 12; // Top10 논문 크기 증가\n        return 8;\n      }).attr('fill', d => color(d.clusterId)).attr('stroke', d => {\n        var _topPapersByCluster$d2;\n        if (d.type === 'paper' && (_topPapersByCluster$d2 = topPapersByCluster[d.clusterId]) !== null && _topPapersByCluster$d2 !== void 0 && _topPapersByCluster$d2.has(d.id)) return 'gold';\n        if (d.type === 'cluster' && selectedCluster === d.clusterId) return 'red';\n        if (d.type === 'paper' && (selectedPaper === null || selectedPaper === void 0 ? void 0 : selectedPaper.id) === d.id) return 'red';\n        return '#fff';\n      }).attr('stroke-width', d => (selectedPaper === null || selectedPaper === void 0 ? void 0 : selectedPaper.id) === d.id || selectedCluster === d.clusterId ? 3 : 1.5);\n      nodeGroup.append('text').text(d => d.type === 'cluster' ? `C${d.clusterId}` : d.name.length > 20 ? d.name.slice(0, 20) + '…' : d.name).attr('text-anchor', 'middle').attr('y', d => d.type === 'cluster' ? 5 : -12).style('font-size', d => d.type === 'cluster' ? '14px' : '8px').style('font-weight', d => d.type === 'cluster' ? 'bold' : 'normal').style('cursor', 'pointer');\n      simulation.on('tick', () => {\n        link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n        nodeGroup.attr('transform', d => `translate(${d.x},${d.y})`);\n      });\n      const zoom = d3.zoom().on('zoom', event => {\n        svgGroup.attr('transform', event.transform);\n      });\n      svg.call(zoom);\n      function drag(simulation) {\n        function dragstarted(event, d) {\n          if (!event.active) simulation.alphaTarget(0.3).restart();\n          d.fx = d.x;\n          d.fy = d.y;\n        }\n        function dragged(event, d) {\n          d.fx = event.x;\n          d.fy = event.y;\n        }\n        function dragended(event, d) {\n          if (!event.active) simulation.alphaTarget(0);\n          d.fx = null;\n          d.fy = null;\n        }\n        return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\n      }\n    }; // ← drawGraph 끝\n\n    if (selectedPaper) {\n      // 현재 데이터의 노드 목록에 선택된 논문이 존재하는지 확인\n      const paperExistsInCurrentData = nodes.some(node => node.id === selectedPaper.id);\n      if (paperExistsInCurrentData) {\n        zoomInToNode(selectedPaper.id);\n      }\n    }\n    const topPapersByCluster = {};\n    Object.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\n      const sorted = [...papers].map(p => ({\n        ...p,\n        pagerank: pagerankLookup[p.id] || 0\n      })).sort((a, b) => b.pagerank - a.pagerank).slice(0, 10);\n      topPapersByCluster[clusterId] = new Set(sorted.map(p => p.id));\n    });\n    drawGraph(currentData); // 새 함수(아래 ①)로 분리\n  }, [currentData]);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('circle').attr('stroke', d => selectedPaper && d.id === selectedPaper.id || selectedCluster && d.type === 'cluster' && d.clusterId === selectedCluster ? 'red' : '#fff').attr('stroke-width', d => selectedPaper && d.id === selectedPaper.id || selectedCluster && d.type === 'cluster' && d.clusterId === selectedCluster ? 3 : 1).attr('r', d => d.type === 'cluster' ? 25 : selectedPaper && d.id === selectedPaper.id ? 12 : 8);\n    if (selectedPaper) zoomInToNode(selectedPaper.id);\n  }, [selectedPaper, selectedCluster]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '10px',\n          left: '20px',\n          zIndex: 10,\n          background: '#fff',\n          padding: '10px',\n          borderRadius: '8px',\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            marginRight: '10px',\n            fontWeight: 'bold'\n          },\n          children: \"\\uC5F0\\uB3C4 \\uC120\\uD0DD:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedYear,\n          onChange: e => handleYearChange(e.target.value),\n          style: {\n            padding: '5px',\n            borderRadius: '5px',\n            border: '1px solid #ccc'\n          },\n          children: availableYears.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year.label,\n            children: year.label\n          }, year.label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '90px',\n          left: '20px',\n          zIndex: 10,\n          background: '#fff',\n          padding: '10px',\n          borderRadius: '8px',\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          zIndex: 10,\n          background: '#fff',\n          padding: '10px',\n          borderRadius: '8px',\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)',\n          display: 'flex',\n          gap: '10px',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchKeyword,\n          onChange: handleInputChange,\n          onKeyDown: handleKeyDown,\n          placeholder: \"\\uB17C\\uBB38 \\uC81C\\uBAA9 \\uAC80\\uC0C9\",\n          style: {\n            width: '300px',\n            padding: '8px 12px',\n            borderRadius: '5px',\n            border: '1px solid #ccc'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSearch,\n          style: {\n            padding: '8px 16px',\n            borderRadius: '5px',\n            border: 'none',\n            backgroundColor: '#007bff',\n            color: '#fff',\n            cursor: 'pointer'\n          },\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red',\n            fontSize: '14px',\n            marginTop: '10px'\n          },\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            position: 'absolute',\n            top: '50px',\n            background: '#fff',\n            border: '1px solid #ddd',\n            listStyle: 'none',\n            padding: '5px',\n            margin: 0,\n            width: '300px',\n            zIndex: 20,\n            maxHeight: '200px',\n            overflowY: 'auto',\n            borderRadius: '5px',\n            boxShadow: '0 2px 5px rgba(0,0,0,0.15)'\n          },\n          children: suggestions.map(paper => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              padding: '5px',\n              cursor: 'pointer'\n            },\n            onClick: () => handleSuggestionClick(paper),\n            children: paper.title\n          }, paper.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"1000\",\n        height: \"700\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: '#f9f9f9',\n        border: '1px solid #ddd',\n        borderRadius: '10px',\n        padding: '15px',\n        boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n        width: '400px',\n        margin: '10px',\n        overflowY: 'auto'\n      },\n      children: selectedPaper ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: '20px',\n            marginBottom: '10px',\n            color: '#007bff'\n          },\n          children: selectedPaper.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 11\n        }, this), ((_meta$year, _meta$citationCount) => {\n          const meta = citationLookup[selectedPaper.id] || {};\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: '#fdfdfd',\n              padding: '10px 12px',\n              borderRadius: '8px',\n              boxShadow: '0 1px 3px rgba(0,0,0,0.08)',\n              marginBottom: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\uD83D\\uDCC5 \\uCD9C\\uD310\\uC5F0\\uB3C4:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 20\n              }, this), \" \", (_meta$year = meta.year) !== null && _meta$year !== void 0 ? _meta$year : '정보 없음']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\uD83D\\uDC65 \\uC800\\uC790:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 43\n              }, this), meta.authors && meta.authors.length ? meta.authors.join(', ') : '정보 없음']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\uD83D\\uDD01 \\uC778\\uC6A9 \\uC218:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 20\n              }, this), \" \", (_meta$citationCount = meta.citationCount) !== null && _meta$citationCount !== void 0 ? _meta$citationCount : '정보 없음']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 15\n          }, this);\n        })(), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontWeight: 'bold',\n            marginBottom: 5\n          },\n          children: [\"\\uD83D\\uDCCC \\uD074\\uB7EC\\uC2A4\\uD130 ID: \", selectedCluster]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              fontSize: '16px',\n              marginBottom: '8px'\n            },\n            children: [\"\\uD83D\\uDD11 \\uD074\\uB7EC\\uC2A4\\uD130 \", selectedCluster, \"\\uC758 \\uD0A4\\uC6CC\\uB4DC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              paddingLeft: '20px',\n              lineHeight: '1.6'\n            },\n            children: (_currentData$cluster_ = currentData.cluster_keywords[selectedCluster]) === null || _currentData$cluster_ === void 0 ? void 0 : _currentData$cluster_.map((kw, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: kw\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : selectedCluster && currentData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: '18px',\n            color: '#007bff'\n          },\n          children: [\"\\uD83D\\uDCDA \\uD074\\uB7EC\\uC2A4\\uD130 \", selectedCluster, \" \\uB0B4 \\uB17C\\uBB38\\uB4E4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxHeight: 300,\n            overflowY: 'auto',\n            paddingLeft: 20,\n            border: '1px solid #eee',\n            borderRadius: 6,\n            background: '#fff',\n            padding: 8,\n            marginTop: 5,\n            boxShadow: '0 1px 3px rgba(0,0,0,0.08)'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              margin: 0,\n              paddingLeft: '20px',\n              listStyleType: 'disc'\n            },\n            children: (_currentData$cluster_2 = currentData.cluster_details[selectedCluster]) === null || _currentData$cluster_2 === void 0 ? void 0 : _currentData$cluster_2.map((paper, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleSuggestionClick(paper),\n              style: {\n                marginBottom: '8px',\n                cursor: 'pointer',\n                padding: '6px 10px',\n                borderRadius: '6px',\n                transition: 'background-color 0.2s'\n              },\n              onMouseEnter: e => {\n                e.currentTarget.style.backgroundColor = '#e9f5ff';\n              },\n              onMouseLeave: e => {\n                e.currentTarget.style.backgroundColor = 'transparent';\n              },\n              children: paper.title\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this), ((_currentData$cluster_3 = currentData.cluster_keywords[selectedCluster]) === null || _currentData$cluster_3 === void 0 ? void 0 : _currentData$cluster_3.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              fontSize: '16px',\n              marginBottom: '15px'\n            },\n            children: [\"\\uD83D\\uDD11 \\uD074\\uB7EC\\uC2A4\\uD130 \", selectedCluster, \"\\uC758 \\uD0A4\\uC6CC\\uB4DC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              listStyle: 'none',\n              padding: 0,\n              margin: 0,\n              maxHeight: '300px',\n              overflowY: 'auto'\n            },\n            children: currentData.cluster_keywords[selectedCluster].map((kw, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                backgroundColor: '#fff',\n                padding: '8px 12px',\n                marginBottom: '6px',\n                borderRadius: '6px',\n                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n                borderLeft: '4px solid #007bff'\n              },\n              children: kw\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontStyle: 'italic',\n          color: '#666'\n        },\n        children: \"\\uB17C\\uBB38 \\uB610\\uB294 \\uD074\\uB7EC\\uC2A4\\uD130\\uB97C \\uD074\\uB9AD\\uD558\\uC5EC \\uC0C1\\uC138 \\uC815\\uBCF4\\uB97C \\uD655\\uC778\\uD558\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 515,\n    columnNumber: 5\n  }, this);\n}\n_s(CitationYearPage, \"qA7rPmGnlopGvamN3ySKGd7rz88=\");\n_c = CitationYearPage;\nexport default CitationYearPage;\nvar _c;\n$RefreshReg$(_c, \"CitationYearPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","CitationYearPage","_s","_currentData$cluster_","_currentData$cluster_2","_currentData$cluster_3","svgRef","yearlyEmergingKeywords","setYearlyEmergingKeywords","allYearData","setAllYearData","selectedYear","setSelectedYear","currentData","setCurrentData","selectedCluster","setSelectedCluster","selectedPaper","setSelectedPaper","searchKeyword","setSearchKeyword","suggestions","setSuggestions","citationLookup","setCitationLookup","errorMessage","setErrorMessage","emergingKeywords","setEmergingKeywords","simulationRef","availableYears","label","file","pagerankLookup","setPagerankLookup","fetch","then","res","json","map","forEach","p","id","pagerank","catch","err","console","error","nodes","n","_n$citationCount","authors","Array","isArray","JSON","parse","split","year","citationCount","Promise","all","dataArray","yearDataMap","idx","keywordTimeline","yearData","Object","values","cluster_keywords","keywords","keyword","yearToKeywordMap","_availableYears","prev","prevData","currentKeywordCounts","kwList","k","prevKeywordCounts","trendList","entries","curCount","prevCount","filter","sort","a","b","slice","t","latestYears","y","earlierYears","trends","counts","past","reduce","sum","recent","trending","firstAvailableYear","find","handleYearChange","handleInputChange","e","target","value","length","matched","cluster_details","papers","paper","title","toLowerCase","includes","push","handleSuggestionClick","enrichedPaper","name","clusterId","some","handleSearch","foundPaper","isPaperFoundInCurrentYear","match","handleKeyDown","key","safeSelector","cleanedId","replace","test","zoomInToNode","nodeId","svg","select","current","width","height","node","d","datum","x","stop","scale","transform","zoomIdentity","translate","zoom","on","event","attr","call","transition","duration","selectAll","remove","svgGroup","append","links","centerNode","type","paperCount","detail","source","color","scaleOrdinal","schemeCategory10","drawGraph","data","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","forceCollide","alphaDecay","link","join","nodeGroup","drag","_topPapersByCluster$d","topPapersByCluster","has","_topPapersByCluster$d2","text","style","dragstarted","active","alphaTarget","restart","fx","fy","dragged","dragended","paperExistsInCurrentData","sorted","Set","display","children","flex","position","top","left","zIndex","background","padding","borderRadius","boxShadow","marginRight","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","onChange","border","gap","alignItems","onKeyDown","placeholder","onClick","backgroundColor","cursor","fontSize","marginTop","listStyle","margin","maxHeight","overflowY","ref","marginBottom","_meta$year","_meta$citationCount","meta","paddingLeft","lineHeight","kw","i","listStyleType","onMouseEnter","currentTarget","onMouseLeave","borderLeft","fontStyle","_c","$RefreshReg$"],"sources":["C:/Users/ksoyu/Downloads/nlp/frontend/src/pages/CitationYearPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nfunction CitationYearPage() {\r\n  const svgRef = useRef();\r\n  const [yearlyEmergingKeywords, setYearlyEmergingKeywords] = useState({});\r\n  const [allYearData, setAllYearData] = useState({});\r\n  const [selectedYear, setSelectedYear] = useState('2015-2017');\r\n  const [currentData, setCurrentData] = useState(null);\r\n  const [selectedCluster, setSelectedCluster] = useState(null);\r\n  const [selectedPaper, setSelectedPaper] = useState(null);\r\n  const [searchKeyword, setSearchKeyword] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [citationLookup, setCitationLookup] = useState({});   // id → {authors, year}\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [emergingKeywords, setEmergingKeywords] = useState([]);\r\n  const simulationRef = useRef(null);\r\n  const availableYears = [\r\n    { label: '2015-2017', file: 'cluster_2015_2017.json' },\r\n    { label: '2016-2018', file: 'cluster_2016_2018.json' },\r\n    { label: '2017-2019', file: 'cluster_2017_2019.json' },\r\n    { label: '2018-2020', file: 'cluster_2018_2020.json' },\r\n    { label: '2019-2021', file: 'cluster_2019_2021.json' },\r\n    { label: '2020-2022', file: 'cluster_2020_2022.json' },\r\n    { label: '2021-2023', file: 'cluster_2021_2023.json' },\r\n    { label: '2022-2024', file: 'cluster_2022_2024.json' }\r\n  ];\r\n  const [pagerankLookup, setPagerankLookup] = useState({});  // 논문 ID → PageRank\r\n\r\n  useEffect(() => {\r\n    fetch('/papers_by_pagerank.json')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const map = {};\r\n        json.forEach(p => {\r\n          map[p.id] = p.pagerank;\r\n        });\r\n        setPagerankLookup(map);\r\n      })\r\n      .catch(err => console.error('Failed to load PageRank data:', err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // citation_graph_with_cluster_v3.json 파일 로드\r\n    fetch('/citation_graph_with_cluster_v3.json')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        // nodes 배열 → id 기반 메타데이터 맵으로 변환\r\n        const map = {};\r\n        json.nodes.forEach(n => {\r\n          let authors = [];\r\n          if (Array.isArray(n.authors)) authors = n.authors;\r\n          else if (typeof n.authors === 'string') {\r\n            try { authors = JSON.parse(n.authors); }      // '[\"A\",\"B\"]'\r\n            catch { authors = n.authors.split(/,\\s*/); }  // 'A, B, C'\r\n          }\r\n          map[n.id] = {\r\n            authors,\r\n            year: n.year,\r\n            citationCount: n.citationCount ?? 0\r\n          };\r\n        });\r\n        setCitationLookup(map);\r\n      })\r\n      .catch(err => console.error('Failed to load citation data:', err));\r\n    \r\n    // 모든 연도별 JSON 파일을 로드\r\n    Promise.all(availableYears.map(year => \r\n      fetch(`/cluster_with_keywords_by_year/${year.file}`)\r\n        .then(res => res.json())\r\n        .catch(err => {\r\n          console.error(`Failed to load ${year.file}:`, err);\r\n          return null;\r\n        })\r\n    ))\r\n    .then(dataArray => {\r\n      const yearDataMap = {};\r\n      availableYears.forEach((year, idx) => {\r\n        if (dataArray[idx]) {\r\n          yearDataMap[year.label] = dataArray[idx];\r\n        }\r\n      });\r\n      setAllYearData(yearDataMap);\r\n      // --- Emerging Topic Analysis ---\r\n      const keywordTimeline = {};\r\n      availableYears.forEach(({ label }) => {\r\n        const yearData = yearDataMap[label];\r\n        if (!yearData) return;\r\n        Object.values(yearData.cluster_keywords).forEach(keywords => {\r\n          keywords.forEach(keyword => {\r\n            if (!keywordTimeline[keyword]) keywordTimeline[keyword] = {};\r\n            keywordTimeline[keyword][label] = (keywordTimeline[keyword][label] || 0) + 1;\r\n          });\r\n        });\r\n      });\r\n      // Build year-specific emerging keyword list\r\n      const yearToKeywordMap = {};\r\n      availableYears.forEach(({ label }, idx) => {\r\n        const currentData = yearDataMap[label];\r\n        if (!currentData) return;\r\n\r\n        const prev = availableYears[idx - 1]?.label;\r\n        const prevData = yearDataMap[prev];\r\n\r\n        const currentKeywordCounts = {};\r\n        Object.values(currentData.cluster_keywords).forEach(kwList => {\r\n          kwList.forEach(k => currentKeywordCounts[k] = (currentKeywordCounts[k] || 0) + 1);\r\n        });\r\n\r\n        const prevKeywordCounts = {};\r\n        if (prevData) {\r\n          Object.values(prevData.cluster_keywords).forEach(kwList => {\r\n            kwList.forEach(k => prevKeywordCounts[k] = (prevKeywordCounts[k] || 0) + 1);\r\n          });\r\n        }\r\n\r\n        const trendList = Object.entries(currentKeywordCounts)\r\n          .map(([k, curCount]) => {\r\n            const prevCount = prevKeywordCounts[k] || 0;\r\n            return { keyword: k, prevCount, curCount };\r\n          })\r\n          .filter(({ prevCount, curCount }) => curCount >= 2 && curCount > prevCount * 1.5)\r\n          .sort((a, b) => b.curCount - a.curCount)\r\n          .slice(0, 8)\r\n          .map(t => t.keyword);\r\n\r\n        yearToKeywordMap[label] = trendList;\r\n      });\r\n      setYearlyEmergingKeywords(yearToKeywordMap);\r\n\r\n\r\n      const latestYears = availableYears.slice(-3).map(y => y.label);\r\n      const earlierYears = availableYears.slice(0, -3).map(y => y.label);\r\n\r\n      const trends = Object.entries(keywordTimeline).map(([keyword, counts]) => {\r\n        const past = earlierYears.reduce((sum, year) => sum + (counts[year] || 0), 0);\r\n        const recent = latestYears.reduce((sum, year) => sum + (counts[year] || 0), 0);\r\n        return { keyword, past, recent };\r\n      });\r\n\r\n      const trending = trends\r\n        .filter(({ past, recent }) => recent >= 3 && recent > past * 1.5)\r\n        .sort((a, b) => b.recent - a.recent)\r\n        .slice(0, 10)\r\n        .map(t => t.keyword);\r\n\r\n      setEmergingKeywords(trending);\r\n\r\n      // 첫 번째 사용 가능한 데이터로 초기화\r\n      const firstAvailableYear = availableYears.find(year => yearDataMap[year.label]);\r\n      if (firstAvailableYear) {\r\n        setSelectedYear(firstAvailableYear.label);\r\n        setCurrentData(yearDataMap[firstAvailableYear.label]);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.error('Failed to load year data:', err);\r\n    });\r\n  }, []);\r\n\r\n  const handleYearChange = (year) => {\r\n    setSelectedYear(year);\r\n    setCurrentData(allYearData[year]);\r\n    setSelectedCluster(null);\r\n    setSelectedPaper(null);\r\n    setSearchKeyword('');\r\n    setSuggestions([]);\r\n    setErrorMessage('');\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const keyword = e.target.value;\r\n    setSearchKeyword(keyword);\r\n\r\n    if (keyword.length < 2 || !currentData) {\r\n      setSuggestions([]);\r\n      return;\r\n    }\r\n\r\n    const matched = [];\r\n    Object.values(currentData.cluster_details).forEach(papers => {\r\n      papers.forEach(paper => {\r\n        if (paper.title.toLowerCase().includes(keyword.toLowerCase()) && matched.length < 10) {\r\n          matched.push(paper);\r\n        }\r\n      });\r\n    });\r\n    setSuggestions(matched);\r\n  };\r\n\r\n  const handleSuggestionClick = (paper) => {\r\n    const enrichedPaper = {\r\n      ...paper,\r\n      name: paper.title  // ← 이 한 줄만 추가하면 해결\r\n    };\r\n    setSelectedPaper(enrichedPaper);\r\n    setSearchKeyword(paper.title);\r\n    setSuggestions([]);\r\n\r\n    // 클러스터 찾기\r\n    Object.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\r\n      if (papers.some(p => p.id === paper.id)) {\r\n        setSelectedCluster(clusterId);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (!currentData) return;\r\n\r\n    // 논문 제목이 검색된 연도에 존재하는지 확인\r\n    let foundPaper = null;\r\n    let isPaperFoundInCurrentYear = false;\r\n\r\n    Object.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\r\n      const match = papers.find(p => p.title.toLowerCase() === searchKeyword.toLowerCase());\r\n      if (match) {\r\n        foundPaper = match;\r\n        isPaperFoundInCurrentYear = true;\r\n      }\r\n    });\r\n\r\n    if (isPaperFoundInCurrentYear) {\r\n      handleSuggestionClick(foundPaper);\r\n    } else {\r\n      setErrorMessage('해당 연도에 존재하지 않는 논문입니다.');\r\n      setSelectedPaper(null);\r\n      setSelectedCluster(null);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  };\r\n\r\n  const safeSelector = (id) => {\r\n    // CSS 선택자 규칙에 맞게 변환 (예: . 대신 _로 변환)\r\n    // 1. Replace all characters that are not alphanumeric, hyphens, or underscores with an underscore.\r\n    let cleanedId = id.replace(/[^a-zA-Z0-9_-]/g, \"_\");\r\n\r\n    // 2. Ensure the ID starts with a letter or an underscore.\r\n    //    If it starts with a number or hyphen (which is allowed later but not at the start),\r\n    //    prepend an underscore.\r\n    if (!/^[a-zA-Z_]/.test(cleanedId)) {\r\n      cleanedId = \"_\" + cleanedId;\r\n    }\r\n\r\n    return cleanedId;\r\n  };\r\n\r\n  const zoomInToNode = (nodeId) => {\r\n    const svg = d3.select(svgRef.current);\r\n    const width = 1000, height = 700;\r\n\r\n    const node = d3.select(`g#${safeSelector(nodeId)}`);\r\n    const d = node.datum();\r\n    if (!d || d.x == null || d.y == null) return;\r\n\r\n    // ① 시뮬레이션이 돌고 있으면 멈춤\r\n    if (simulationRef.current) simulationRef.current.stop();\r\n\r\n    const scale = 1.5;\r\n    const transform = d3.zoomIdentity\r\n        .translate(width / 2 - d.x * scale, height / 2 - d.y * scale)\r\n        .scale(scale);\r\n\r\n    const zoom = d3.zoom().on('zoom', (event) => {\r\n      svg.select('g').attr('transform', event.transform);\r\n    });\r\n    svg.call(zoom);\r\n\r\n    // ② 한 번만 부드럽게 이동\r\n    svg.transition()\r\n      .duration(750)\r\n      .call(zoom.transform, transform);\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (!currentData) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove();\r\n\r\n    const width = 1000;\r\n    const height = 700;\r\n    svg.attr('viewBox', [0, 0, width, height]);\r\n\r\n    const svgGroup = svg.append(\"g\");\r\n\r\n    // 클러스터 데이터를 노드와 링크로 변환\r\n    const nodes = [];\r\n    const links = [];\r\n    \r\n    Object.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\r\n      // 클러스터 중심 노드\r\n      const centerNode = {\r\n        id: `cluster_${clusterId}`,\r\n        name: `Cluster ${clusterId}`,\r\n        type: 'cluster',\r\n        clusterId: clusterId,\r\n        keywords: currentData.cluster_keywords[clusterId] || [],\r\n        paperCount: papers.length\r\n      };\r\n      nodes.push(centerNode);\r\n\r\n      // 논문 노드들\r\n      papers.forEach(paper => {\r\n        nodes.push({\r\n          id: paper.id,\r\n          name: paper.title,\r\n          type: 'paper',\r\n          clusterId: clusterId,\r\n          // authors가 문자열이면 JSON.parse 해서 배열로 넣기\r\n          detail: {\r\n            ...paper,\r\n          authors: (() => {\r\n            if (Array.isArray(paper.authors)) return paper.authors;\r\n            if (typeof paper.authors === 'string') {\r\n              try { return JSON.parse(paper.authors); }   // '[\"A\",\"B\"]' 형태\r\n              catch { return paper.authors.split(/,\\s*/); } // 'A, B, C' 형태\r\n            }\r\n            return [];                                     // 정보 없을 때\r\n          })(),\r\n\r\n          },\r\n        });\r\n        \r\n        // 클러스터 중심과 논문을 연결\r\n        links.push({\r\n          source: `cluster_${clusterId}`,\r\n          target: paper.id\r\n        });\r\n      });\r\n    });\r\n\r\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n    /* ✅ 여기서부터 새로 추가 */\r\n    const drawGraph = (data) => {\r\n      if (!data) return;\r\n\r\n      // === (원래 useEffect 안에 있던 그래프 생성 코드) ===\r\n      const svg = d3.select(svgRef.current);\r\n      svg.selectAll('*').remove();\r\n\r\n      const width = 1000, height = 700;\r\n      svg.attr('viewBox', [0, 0, width, height]);\r\n      const svgGroup = svg.append('g');\r\n\r\n      /* 1. nodes, links 구성 */\r\n      const nodes = [];\r\n      const links = [];\r\n      Object.entries(data.cluster_details).forEach(([clusterId, papers]) => {\r\n        nodes.push({\r\n          id: `cluster_${clusterId}`,\r\n          name: `Cluster ${clusterId}`,\r\n          type: 'cluster',\r\n          clusterId,\r\n          keywords: data.cluster_keywords[clusterId] || [],\r\n          paperCount: papers.length,\r\n        });\r\n        papers.forEach(paper => {\r\n          nodes.push({\r\n            id: paper.id,\r\n            name: paper.title,\r\n            type: 'paper',\r\n            clusterId,\r\n            detail: paper,\r\n          });\r\n          links.push({ source: `cluster_${clusterId}`, target: paper.id });\r\n        });\r\n      });\r\n\r\n      /* 2. forceSimulation */\r\n      const simulation = d3.forceSimulation(nodes)\r\n        .force('link', d3.forceLink(links).id(d => d.id).distance(80))\r\n        .force('charge', d3.forceManyBody().strength(d => d.type === 'cluster' ? -500 : -100))\r\n        .force('center', d3.forceCenter(width / 2, height / 2))\r\n        .force('collision', d3.forceCollide(d => d.type === 'cluster' ? 40 : 20))\r\n        .alphaDecay(0.05);\r\n      simulationRef.current = simulation;\r\n\r\n      /* 3. link, nodeGroup, drag, tick 콜백 (기존 코드 그대로) */\r\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n      const link = svgGroup.append('g')\r\n        .attr('stroke', '#aaa')\r\n        .attr('stroke-opacity', 0.3)\r\n        .selectAll('line')\r\n        .data(links)\r\n        .join('line')\r\n        .attr('stroke-width', 1);\r\n\r\n      const nodeGroup = svgGroup.append('g')\r\n        .selectAll('g')\r\n        .data(nodes)\r\n        .join('g')\r\n        .attr('id', d => safeSelector(d.id))\r\n        .call(drag(simulation))\r\n        .on('click', (event, d) => {\r\n          if (d.type === 'cluster') {\r\n            setSelectedCluster(d.clusterId);\r\n            setSelectedPaper(null);\r\n          } else {\r\n            setSelectedCluster(d.clusterId);\r\n            setSelectedPaper(d);   // 줌은 선택-effect가 수행\r\n          }\r\n        });\r\n\r\n      nodeGroup.append('circle')\r\n        .attr('r', d => {\r\n          if (d.type === 'cluster') return 25;\r\n          if (topPapersByCluster[d.clusterId]?.has(d.id)) return 12;  // Top10 논문 크기 증가\r\n          return 8;\r\n        })\r\n        .attr('fill', d => color(d.clusterId))\r\n        .attr('stroke', d => {\r\n          if (d.type === 'paper' && topPapersByCluster[d.clusterId]?.has(d.id)) return 'gold';\r\n          if (d.type === 'cluster' && selectedCluster === d.clusterId) return 'red';\r\n          if (d.type === 'paper' && selectedPaper?.id === d.id) return 'red';\r\n          return '#fff';\r\n        })\r\n        .attr('stroke-width', d => \r\n          (selectedPaper?.id === d.id || selectedCluster === d.clusterId)\r\n            ? 3 : 1.5);\r\n\r\n\r\n      nodeGroup.append('text')\r\n        .text(d => d.type === 'cluster'\r\n          ? `C${d.clusterId}`\r\n          : (d.name.length > 20 ? d.name.slice(0, 20) + '…' : d.name))\r\n        .attr('text-anchor', 'middle')\r\n        .attr('y', d => d.type === 'cluster' ? 5 : -12)\r\n        .style('font-size', d => d.type === 'cluster' ? '14px' : '8px')\r\n        .style('font-weight', d => d.type === 'cluster' ? 'bold' : 'normal')\r\n        .style('cursor', 'pointer');\r\n\r\n      simulation.on('tick', () => {\r\n        link\r\n          .attr('x1', d => d.source.x)\r\n          .attr('y1', d => d.source.y)\r\n          .attr('x2', d => d.target.x)\r\n          .attr('y2', d => d.target.y);\r\n        nodeGroup.attr('transform', d => `translate(${d.x},${d.y})`);\r\n      });\r\n\r\n      const zoom = d3.zoom().on('zoom', (event) => {\r\n        svgGroup.attr('transform', event.transform);\r\n      });\r\n      svg.call(zoom);\r\n\r\n      function drag(simulation) {\r\n        function dragstarted(event, d) {\r\n          if (!event.active) simulation.alphaTarget(0.3).restart();\r\n          d.fx = d.x; d.fy = d.y;\r\n        }\r\n        function dragged(event, d) {\r\n          d.fx = event.x; d.fy = event.y;\r\n        }\r\n        function dragended(event, d) {\r\n          if (!event.active) simulation.alphaTarget(0);\r\n          d.fx = null; d.fy = null;\r\n        }\r\n        return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended);\r\n      }\r\n    };  // ← drawGraph 끝\r\n\r\n    if (selectedPaper) {\r\n      // 현재 데이터의 노드 목록에 선택된 논문이 존재하는지 확인\r\n      const paperExistsInCurrentData = nodes.some(node => node.id === selectedPaper.id);\r\n      if (paperExistsInCurrentData) {\r\n        zoomInToNode(selectedPaper.id);\r\n      }\r\n    }\r\n\r\n    const topPapersByCluster = {};\r\nObject.entries(currentData.cluster_details).forEach(([clusterId, papers]) => {\r\n  const sorted = [...papers]\r\n    .map(p => ({ ...p, pagerank: pagerankLookup[p.id] || 0 }))\r\n    .sort((a, b) => b.pagerank - a.pagerank)\r\n    .slice(0, 10);\r\n  topPapersByCluster[clusterId] = new Set(sorted.map(p => p.id));\r\n});\r\n\r\n    drawGraph(currentData);   // 새 함수(아래 ①)로 분리\r\n  }, [currentData]);\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n\r\n    svg.selectAll('circle')\r\n       .attr('stroke', d =>\r\n         (selectedPaper && d.id === selectedPaper.id) ||\r\n         (selectedCluster && d.type === 'cluster' && d.clusterId === selectedCluster)\r\n           ? 'red' : '#fff')\r\n       .attr('stroke-width', d =>\r\n         (selectedPaper && d.id === selectedPaper.id) ||\r\n         (selectedCluster && d.type === 'cluster' && d.clusterId === selectedCluster)\r\n           ? 3 : 1)\r\n       .attr('r', d =>\r\n         d.type === 'cluster'\r\n           ? 25\r\n           : (selectedPaper && d.id === selectedPaper.id ? 12 : 8));\r\n\r\n    if (selectedPaper) zoomInToNode(selectedPaper.id);\r\n  }, [selectedPaper, selectedCluster]);\r\n\r\n  return (\r\n    <div style={{ display: 'flex', height: '100vh' }}>\r\n      <div style={{ flex: 1, position: 'relative' }}>\r\n        {/* 연도 선택 */}\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '10px',\r\n          left: '20px',\r\n          zIndex: 10,\r\n          background: '#fff',\r\n          padding: '10px',\r\n          borderRadius: '8px',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <label style={{ marginRight: '10px', fontWeight: 'bold' }}>연도 선택:</label>\r\n          <select \r\n            value={selectedYear} \r\n            onChange={(e) => handleYearChange(e.target.value)}\r\n            style={{ padding: '5px', borderRadius: '5px', border: '1px solid #ccc' }}\r\n          >\r\n            {availableYears.map(year => (\r\n              <option key={year.label} value={year.label}>{year.label}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        {/* Emerging Highlight Toggle */}\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '90px',\r\n          left: '20px',\r\n          zIndex: 10,\r\n          background: '#fff',\r\n          padding: '10px',\r\n          borderRadius: '8px',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\r\n        }}>\r\n        </div>\r\n\r\n\r\n        {/* 검색 */}\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50px',\r\n          left: '50%',\r\n          transform: 'translateX(-50%)',\r\n          zIndex: 10,\r\n          background: '#fff',\r\n          padding: '10px',\r\n          borderRadius: '8px',\r\n          boxShadow: '0 2px 10px rgba(0,0,0,0.1)',\r\n          display: 'flex',\r\n          gap: '10px',\r\n          alignItems: 'center'\r\n        }}>\r\n          <input\r\n            type=\"text\"\r\n            value={searchKeyword}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleKeyDown}\r\n            placeholder=\"논문 제목 검색\"\r\n            style={{ width: '300px', padding: '8px 12px', borderRadius: '5px', border: '1px solid #ccc' }}\r\n          />\r\n          <button onClick={handleSearch} style={{\r\n            padding: '8px 16px',\r\n            borderRadius: '5px',\r\n            border: 'none',\r\n            backgroundColor: '#007bff',\r\n            color: '#fff',\r\n            cursor: 'pointer'\r\n          }}>Search</button>\r\n\r\n          {errorMessage && (\r\n            <p style={{ color: 'red', fontSize: '14px', marginTop: '10px' }}>{errorMessage}</p>\r\n          )}\r\n\r\n          {suggestions.length > 0 && (\r\n            <ul style={{\r\n              position: 'absolute',\r\n              top: '50px',\r\n              background: '#fff',\r\n              border: '1px solid #ddd',\r\n              listStyle: 'none',\r\n              padding: '5px',\r\n              margin: 0,\r\n              width: '300px',\r\n              zIndex: 20,\r\n              maxHeight: '200px',\r\n              overflowY: 'auto',\r\n              borderRadius: '5px',\r\n              boxShadow: '0 2px 5px rgba(0,0,0,0.15)'\r\n            }}>\r\n              {suggestions.map(paper => (\r\n                <li key={paper.id} style={{ padding: '5px', cursor: 'pointer' }}\r\n                  onClick={() => handleSuggestionClick(paper)}>\r\n                  {paper.title}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n\r\n        <svg ref={svgRef} width=\"1000\" height=\"700\" />\r\n      </div>\r\n\r\n      {/* 사이드바 */}\r\n      <div style={{ background: '#f9f9f9', border: '1px solid #ddd', borderRadius: '10px', padding: '15px', boxShadow: '0 2px 5px rgba(0,0,0,0.1)', width: '400px', margin: '10px', overflowY: 'auto' }}>\r\n\r\n        {selectedPaper ? (\r\n        <>\r\n          <h4 style={{ fontSize: '20px', marginBottom: '10px', color: '#007bff' }}>{selectedPaper.name}</h4>\r\n\r\n          {(() => {\r\n            const meta = citationLookup[selectedPaper.id] || {};\r\n            return (\r\n              <div style={{ backgroundColor: '#fdfdfd', padding: '10px 12px', borderRadius: '8px', boxShadow: '0 1px 3px rgba(0,0,0,0.08)', marginBottom: '15px' }}>\r\n                <p><strong>📅 출판연도:</strong> {meta.year ?? '정보 없음'}</p>\r\n                <p><strong>👥 저자:</strong><br />\r\n                  {meta.authors && meta.authors.length\r\n                    ? meta.authors.join(', ')\r\n                    : '정보 없음'}\r\n                </p>\r\n                <p><strong>🔁 인용 수:</strong> {meta.citationCount ?? '정보 없음'}</p>\r\n              </div>\r\n            );\r\n          })()}\r\n\r\n          <p style={{ fontWeight: 'bold', marginBottom: 5 }}>📌 클러스터 ID: {selectedCluster}</p>\r\n\r\n          <div style={{ marginTop: '15px' }}>\r\n            <h4 style={{ fontSize: '16px', marginBottom: '8px' }}>🔑 클러스터 {selectedCluster}의 키워드</h4>\r\n            <ul style={{ paddingLeft: '20px', lineHeight: '1.6' }}>\r\n              {currentData.cluster_keywords[selectedCluster]?.map((kw, i) =>\r\n                <li key={i}>{kw}</li>)}\r\n            </ul>\r\n          </div>\r\n        </>\r\n      ) : selectedCluster && currentData ? (\r\n        <>\r\n          <h4 style={{ fontSize: '18px', color: '#007bff' }}>📚 클러스터 {selectedCluster} 내 논문들</h4>\r\n          <div\r\n            style={{\r\n              maxHeight: 300,\r\n              overflowY: 'auto',\r\n              paddingLeft: 20,\r\n              border: '1px solid #eee',\r\n              borderRadius: 6,\r\n              background: '#fff',\r\n              padding: 8,\r\n              marginTop: 5,\r\n              boxShadow: '0 1px 3px rgba(0,0,0,0.08)'\r\n            }}\r\n          >\r\n            <ul style={{ margin: 0, paddingLeft: '20px', listStyleType: 'disc' }}>\r\n              {currentData.cluster_details[selectedCluster]?.map((paper, idx) => (\r\n                <li\r\n                  key={idx}\r\n                  onClick={() => handleSuggestionClick(paper)}\r\n                  style={{\r\n                    marginBottom: '8px',\r\n                    cursor: 'pointer',\r\n                    padding: '6px 10px',\r\n                    borderRadius: '6px',\r\n                    transition: 'background-color 0.2s',\r\n                  }}\r\n                  onMouseEnter={(e) => {\r\n                    e.currentTarget.style.backgroundColor = '#e9f5ff';\r\n                  }}\r\n                  onMouseLeave={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'transparent';\r\n                  }}\r\n                >\r\n                  {paper.title}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n\r\n          {currentData.cluster_keywords[selectedCluster]?.length > 0 && (\r\n            <div style={{ marginTop: '20px' }}>\r\n              <h4 style={{ fontSize: '16px', marginBottom: '15px' }}>🔑 클러스터 {selectedCluster}의 키워드</h4>\r\n              <ul style={{\r\n              listStyle: 'none',\r\n              padding: 0,\r\n              margin: 0,\r\n              maxHeight: '300px',\r\n              overflowY: 'auto'\r\n            }}>\r\n                {currentData.cluster_keywords[selectedCluster].map((kw, idx) => (\r\n                  <li key={idx} style={{\r\n                  backgroundColor: '#fff',\r\n                  padding: '8px 12px',\r\n                  marginBottom: '6px',\r\n                  borderRadius: '6px',\r\n                  boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n                  borderLeft: '4px solid #007bff'\r\n                }}>{kw}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p style={{ fontStyle: 'italic', color: '#666' }}>논문 또는 클러스터를 클릭하여 상세 정보를 확인하세요.</p>\r\n      )}\r\n      </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default CitationYearPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}